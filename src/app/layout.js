"use client";
import "./globals.css";
import Navbar from "./(site)/_nav/Nav";
import Sidebar from "./(site)/_sidebar/Sidebar";
import { Provider } from "react-redux"; // Import Provider for Redux
import { reduxStore } from "./redux/store.js"; // Your Redux store

import { useEffect } from "react";
import {
  loadCategories,
  loadStatus,
  loadTodos,
} from "./redux/feature/todoSlice";
import { useLocalStorage } from "./(site)/customHooks/useLocalStorage";

const metadata = {
  title: "Task Management App",
  description: "Generated by create next app",
};

function RootLayoutComponent({ children }) {
  const { getItem, setItem } = useLocalStorage("Tasks_Data");
  const { getItem: getCategories, setItem: setCategories } = useLocalStorage("Task-categories");
  const { getItem: getStatus, setItem: setStatus } = useLocalStorage("Task-status");

  useEffect(() => {
    // Fetch persisted data for todos, categories, and status
    const persist = getItem() || [];
    const categories = getCategories() || { taskCategories: [] };
    const status = getStatus() || { taskStatus: [] };

    // Load persisted todos, categories, and status into Redux store
    if (persist.length > 0) {
      reduxStore.dispatch(loadTodos(persist));
    }
    console.log(categories,"from layout")
    reduxStore.dispatch(loadCategories(categories.taskCategories));
    reduxStore.dispatch(loadStatus(status.taskStatus));

    // Subscribe to Redux store changes
    const unsubscribe = reduxStore.subscribe(() => {
      const currentState = reduxStore.getState();
      const currentTodos = currentState?.todo?.todos || [];
      const currentCategories = currentState?.todo?.taskCategories || [];
      const currentStatus = currentState?.todo?.taskStatus || [];

      // Update local storage with new values
      setItem(currentTodos);
      setCategories({ taskCateories: currentCategories });
      setStatus({ taskStatus: currentStatus });
    });

    return () => unsubscribe(); // Unsubscribe when component unmounts
  }, [getItem, setItem, getCategories, setCategories, getStatus, setStatus]);
  return (
    <div>
      <Navbar />
      <div className="flex">
        <Sidebar />
        {children}
      </div>
    </div>
  );
}

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <Provider store={reduxStore}>
        {/* Wrapping the entire RootLayout inside Provider */}
        <body>
          <RootLayoutComponent>{children}</RootLayoutComponent>
        </body>
      </Provider>
    </html>
  );
}
